"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTxMetadata = exports.getTxData = void 0;
const axios_1 = __importDefault(require("axios"));
const ARWEAVE_URL = "https://arweave.net/";
const getTxData = (id) => __awaiter(void 0, void 0, void 0, function* () {
    const config = {
        method: "get",
        url: ARWEAVE_URL + id,
        responseType: "arraybuffer"
    };
    try {
        const response = yield (0, axios_1.default)(config);
        if (response.status == 200 || response.status == 202) {
            return bufferToArrayBuffer(response.data);
        }
        else {
            throw new Error("Cannot fetch arweave transaction data: " + id);
        }
    }
    catch (error) {
        throw new Error("Cannot fetch arweave transaction data: " + id);
    }
});
exports.getTxData = getTxData;
const getTxMetadata = (id) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c;
    try {
        const result = yield graphql(getTransaction, { id });
        const txMetadata = (_c = (_b = (_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.transactions) === null || _b === void 0 ? void 0 : _b.edges[0]) === null || _c === void 0 ? void 0 : _c.node;
        if (!txMetadata) {
            throw new Error("Cannot fetch arweave transaction metadata: " + id);
        }
        return txMetadata;
    }
    catch (error) {
        throw new Error("Cannot fetch arweave transaction metadata: " + id);
    }
});
exports.getTxMetadata = getTxMetadata;
const getTransaction = /* GraphQL */ `
query transactionsById($id: ID!) {
  transactions(ids:[$id]) {
    edges {
      node {
        id
        owner {
          address
        }
        data {
          type
          size
        }
        tags {
          name
          value
        }
        block {
          timestamp
        }
      }
    }
  }
}
`;
const graphql = (query, variables) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const config = {
            url: ARWEAVE_URL + "graphql",
            method: 'post',
            headers: {
                'content-type': 'application/json'
            },
            data: JSON.stringify({ query, variables }),
        };
        const response = yield (0, axios_1.default)(config);
        return response.data;
    }
    catch (error) {
        throw new Error("Error while trying to make fetch request");
    }
});
const bufferToArrayBuffer = (buffer) => {
    const arrayBuffer = new ArrayBuffer(buffer.length);
    var view = new Uint8Array(arrayBuffer);
    for (var i = 0; i < buffer.length; ++i) {
        view[i] = buffer[i];
    }
    return arrayBuffer;
};
