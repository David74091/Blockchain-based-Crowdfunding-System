import { Service } from './service';
import { NodeLike, NodeType } from '../types/node';
import { Keys } from '@akord/crypto';
import { ListOptions } from '../types/list-options';
import { Tags } from '../types/contract';
import { Paginated } from '../types/paginated';
declare class NodeService<T = NodeLike> extends Service {
    protected NodeType: new (arg0: any, arg1: Keys[]) => NodeLike;
    objectType: NodeType;
    defaultListOptions: ListOptions;
    /**
     * @param  {string} nodeId
     * @param  {string} name new name
     * @returns Promise with corresponding transaction id
     */
    rename(nodeId: string, name: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} nodeId
     * @param  {string} [parentId] new parent folder id
     * @returns Promise with corresponding transaction id
     */
    move(nodeId: string, parentId?: string, vaultId?: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} nodeId
     * @returns Promise with corresponding transaction id
     */
    revoke(nodeId: string, vaultId?: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} nodeId
     * @returns Promise with corresponding transaction id
     */
    restore(nodeId: string, vaultId?: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} nodeId
     * @returns Promise with corresponding transaction id
     */
    delete(nodeId: string, vaultId?: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} nodeId
     * @returns Promise with the decrypted node
     */
    get(nodeId: string, vaultId?: string, shouldDecrypt?: boolean): Promise<T>;
    /**
     * @param  {string} vaultId
     * @returns Promise with paginated nodes within given vault
     */
    list(vaultId: string, listOptions?: ListOptions): Promise<Paginated<NodeLike>>;
    /**
     * @param  {string} vaultId
     * @returns Promise with all nodes within given vault
     */
    listAll(vaultId: string, listOptions?: ListOptions): Promise<Array<NodeLike>>;
    private nodeInstance;
    protected setVaultContextFromNodeId(nodeId: string, type: NodeType, vaultId?: string): Promise<void>;
    protected getTags(): Promise<Tags>;
}
export { NodeService };
